[
  {
    "level_id": 1,
    "description": "Introduction to AND",
    "type": "bitwise",
    "level_num": 1,
    "difficulty": 1,
    "content": [
      {
        "type": "text",
        "data": "This tutorial deals with the concept of the bitwise AND operator."
      },
      {
        "type": "text",
        "data": "The AND operator is useful for Bitmasking, which is used to determine which bits in a given binary representation are set.\nBitwise AND:\nBitwise AND is essentially looking at two bits and returning the logical AND operation result of them, that is to say returning 1 if and only if both bits are also 1."
      },
      {
        "type": "text",
        "data": "For example, in the following two binary representations:\n1010\n1000\nThe result of a Bitwise AND operation on them would return:\n1000"
      },
      {
        "type": "text",
        "data": "As the most significant digit is the only position where both binary values contain a 1, any comparison between a 1 and 0 like in the 3rd most significant digit or between two 0s will return a 0. This is used for Bit Masking, which involves hiding all non-relevant digits in a binary value to see what the value at a specific position is:\n1010\n0010\n----\n0010\nThis reveals that the 3rd most significant digit in the top value is set to 1."
      }
    ]
  },

  {
    "level_id": 2,
    "description": "Introduction to OR",
    "type": "bitwise",
    "level_num": 2,
    "difficulty": 1,
    "content": [
      {
        "type": "text",
        "data": "This tutorial deals with the concept of the bitwise OR operator."
      },
      {
        "type": "text",
        "data": "Bitwise OR:\nA bitwise OR takes two binary values and performs the logical inclusive OR operation on each pair of corresponding bits. This essentially means that the result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1; otherwise, the result is 0."
      },
      {
        "type": "text",
        "data": "For example:\n0011\n0101\nWill produce the string\n0111\nThe most significant position contains 2 0s and thus the result is 0. The next two positions contain a 0 and a 1 so the result will be a one. Finally the least significant position contains a 1 and a 1, so the result will be a 1."
      }
    ]
  },

  {
    "level_id": 3,
    "description": "Introduction to NOT",
    "type": "bitwise",
    "level_num": 3,
    "difficulty": 1,
    "content": [
      {
        "type": "text",
        "data": "This tutorial deals with the concept of the bitwise NOT operator."
      },
      {
        "type": "text",
        "data": "Bitwise NOT:\nThe bitwise NOT is an operation that performs logical negation on each bit. Bits that are 0 become 1, and those that are 1 become 0."
      },
      {
        "type": "text",
        "data": "For example:\n0001\nBecomes\n1110"
      }
    ]
  },

  {
    "level_id": 4,
    "description": "Introduction to XOR",
    "type": "bitwise",
    "level_num": 4,
    "difficulty": 1,
    "content": [
      {
        "type": "text",
        "data": "This tutorial deals with the concept of the bitwise XOR operator."
      },
      {
        "type": "text",
        "data": "Bitwise XOR:\nThe Bitwise OR is similar to OR, except that only when the input is a pair of 1 and 0 or 0 and 1 will it return 1. That is to say, a 1 and 1 will not result in a 1."
      },
      {
        "type": "text",
        "data": "For example:\n0011\n0101\nWill produce the string\n0110"
      }
    ]
  },

  {
    "level_id": 5,
    "description": "Introduction to NAND",
    "type": "bitwise",
    "level_num": 5,
    "difficulty": 1,
    "content": [
      {
        "type": "text",
        "data": "This tutorial deals with the concept of the bitwise NAND operator."
      },
      {
        "type": "text",
        "data": "Bitwise NAND:\nThe bitwise NAND is a combination of a NOT and AND gate. This means that the resulting output is always flipped from that of the AND gate. An input of 1 and 1 will result in a 0 while all other inputs will result in a 1."
      },
      {
        "type": "text",
        "data": "For example:\n1010\n1000\nWill result in\n0111"
      }
    ]
  },

  {
    "level_id": 6,
    "description": "Introduction to NOR",
    "type": "bitwise",
    "level_num": 6,
    "difficulty": 1,
    "content": [
      {
        "type": "text",
        "data": "Since you have learned OR in the previous level, it is difficult for you to learn NOR."
      },
	    {
        "type": "text",
        "data": "NOR is like NOT OR. All you need to do is to perform OR operation, and flip all the bits in the result."
      },
	    {
        "type": "text",
        "data": "Here is an example:"
      },
      {
        "type": "image",
        "data": "http://s5.postimg.org/j8icomovr/NOR_example.jpg"
      }
    ]
  },

  {
    "level_id": 7,
    "description": "Introduction to Left Shift",
    "type": "bitwise",
    "level_num": 7,
    "difficulty": 1,
    "content": [
      {
        "type": "text",
        "data": "Shift the bits to the left. Zeros are shifted in to replace the discarded bits."
      },
	    {
        "type": "text",
        "data": "Here's the example: [Wikipedia, http://en.wikipedia.org/wiki/Bitwise_operation#Bit_shifts]"
      },
      {
        "type": "image",
        "data": "http://s5.postimg.org/65mq5cynr/left_Shift_example.jpg"
      }
    ]
  },

  {
    "level_id": 8,
    "description": "Introduction to Right Shift",
    "type": "bitwise",
    "level_num": 8,
    "difficulty": 1,
    "content": [
      {
        "type": "text",
        "data": "Shift the bits to the right. Zeros are shifted in to replace the discarded bits."
      },
	    {
        "type": "text",
        "data": "Here is an example: [Expedia, http://en.wikipedia.org/wiki/Bitwise_operation#Bit_shifts]"
      },
      {
        "type": "image",
        "data": "http://s5.postimg.org/wj1m4eq2f/right_Shift_example.jpg"
      }
    ]
  },

  {
    "level_id": 9,
    "description": "Introduction: Converting Base 2 to Base 10",
    "type": "bases",
    "level_num": 1,
    "difficulty": 1,
    "content": [
      {
        "type": "text",
        "data": "Example with explanation: Covert binary number 10101011 to decimal."
      },
      {
        "type": "image",
        "data": "http://s5.postimg.org/izpdcg1h3/Base2_10.jpg"
      },
      {
        "type": "text",
        "data": "Therefore binary number 10101011 is equivalent to decimal number 171."
      }
    ]
  },

  {
    "level_id": 10,
    "description": "Introduction: Converting Base 10 to Base 2",
    "type": "bases",
    "level_num": 2,
    "difficulty": 1,
    "content": [
      {
        "type": "text",
        "data": "Example with explanation: Convert decimal number 78 to decimal."
      },
	    {
        "type": "text",
        "data": "Divide the number repeatedly by 2 until reach 1, keep track of the remainder."
      },
      {
        "type": "image",
        "data": "http://s5.postimg.org/4o19tstx3/Base10_2.jpg"
      },
      {
        "type": "text",
        "data": "Summarize the remainder from bottom to top, and appending a one to the left of the result. Therefore decimal number 78 is equivalent to binary number 1001110."
      }
    ]
  },

  {
    "level_id": 11,
    "description": "Introduction: Converting Base 2 to Base 16",
    "type": "bases",
    "level_num": 3,
    "difficulty": 1,
    "content": [
      {
        "type": "text",
        "data": "In this level, we are going to introduce the conversion between base 2(binary) and base 16(hexadecimal).\n\nWe are going to use 1010110 as example to go through steps.\n\nStep 1:\n Splitting binary to groups of 4, if the left-most group has less than 4 digits, fills up blank with 0s. For our example, it will be:\n0101 0110\n\nStep 2:\nMultiplying each group with 8 4 2 1. (If you already learn binary-decimal conversion, skip to step S)\n\n0101 0110\n8421 8421\n\n0401 0420\n\nStep 3:\nSumming up numbers in each group.\n\n0401 0420\n  5     6\n\nStep S: \nConvert binary into decimal, then convert them into heximal.\n\n 0101-5 0110-6\n\n5 - 5 (hex)\n6 - 6 (hex)\n\nFinally, binary 1010110 has been converted into hex 56. In addition, in hex, number 0-9 are shown as how they are, and 10-15 are shown in alphabets."
      }
    ]
  },

  {
    "level_id": 12,
    "description": "Introduction: Converting Base 16 to Base 2",
    "type": "bases",
    "level_num": 4,
    "difficulty": 1,
    "content": [
      {
        "type": "text",
        "data": "In this section, we are going to introduce the technology of Inversing the steps above.\n\nExample: 4D\nStep 1:\nConverts into decimal form.\n\n4 - 4\nD - 13\nStep 2: \nConverts into binary form, grouping by 4. We already learn how to convert decimal into binary, if you get stuck in this section, try Base 2 to 10.\n\n4 - 0101\n13 - 0111\n\nStep 3:\nPuts them together.\n\n0101 0111\n\nThatâ€™s all.\n"
      }
    ]
  },

    {
    "level_id": 13,
    "description": "Introduction: Converting Base 10 to Base 16",
    "type": "bases",
    "level_num": 5,
    "difficulty": 3,
    "content": [
      {
        "type": "text",
        "data": "In this section, we are going to learn how to convert base 10 (decimal) to base 16 (hex).\n\nUse 1337 as example.\n\nStep 1:\nWe keep adding n with 1 until reach or over the number x. (n begin with 0)\nx = 1337\n16^n\n\n16^0 = 1\n16^1 = 16\n16^2 = 256\n16^3 = 4096\n\nIn this case, we take 256 to calculate hex because s is the largest number that smaller than 1337.\n\nStep 2:\nIn this step, we are going to use the number we got from step 1 to calculate hex number one by one, from left to right.\nKeep adding n until reach or over our target number. (n begins with 0)\n256*n\n\nIn this case,\n256*0 = 1\n256*1 = 256\n256*2 = 512\n256*3 = 768\n256*4 = 1024\n256*5 = 1280\n256*6 = 1536\n\nSince the sum is over 1337, we take 5 and convert it into hex number.\nThen, we take 1337 - 16^5 = 57 and go back to first step, and repeat step 1 to 2 to calculate all of them.\n\nDemonstration for rest of number:\n57\n\nStep 1:\nTarget: 57\n16^1 = 16\n16^2 = 256\n\nTake 16 because 16^2 is too large.\nStep 2:\n\n16*0 = 0\n...\n16*3 = 48\n16*4 = 64\n\nThus we take 3, and convert it to hex, which is 3.\nNow we have first 2 hex number, 5 and 3.\n\n57 - 16^3 = 9\n\nNow we take 9 and repeat steps.\n\n16^0 = 1\n16^ 1 = 16\n\nWe use 1 to perform next step.\n1*0 = 0\n1*1 = 1\nâ€¦\n1*9 = 9\n\nConvert 9 to hex, which is 9.\n\nFinally, we got 539. (hex)\n"
      }
    ]
  },

  {
    "level_id": 14,
    "description": "Introduction: Converting Base 16 to Base 10",
    "type": "bases",
    "level_num": 6,
    "difficulty": 2,
    "content": [
      {
        "type": "text",
        "data": "In this section, we are going to introduce the technology of converting hex to decimal.\n\nUse 1EE7 to go through example.\nStep 1:\nFinds out how many digits in hex number. In this case, there is 4 digits.\n\nStep 2: Converts each digit in 1EE7 into decimal. (Link to Hex decimal cheat sheet)\n\n1EE7\n1 -1\nE - 14\nE - 14\n7 - 7\n\nWe take 1, 14, 14, 7 to next step. If you know how to do binary-decimal conversion, skip to Step S.\n\nStep 3:\nIn decimal, we use base 10 to calculate answer. There are 3 digits in 321, so:\n\n3*10^2 + 2*10^2 + 1*10^0 = 321\n\nIn hex, we use 16 as base, thus\n1*16^3 + 14*16^2 + 14*16^1 + 7*16^0 = 4096 + 3584 + 224 + 7 = 7911\n\nStep S: \nConvert 1, 14, 14, 7 into binary.\n1 - 0001\n14 - 1110\n14 - 1110\n7 - 0111\n\nNext, convert them into decimal. \n0001 1110 1110 0111 => 7911\n\nFinally, we have 7911 as a decimal form of 1EE7."
      }
    ]
  }
]
